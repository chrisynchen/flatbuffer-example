// automatically generated by the FlatBuffers compiler, do not modify

package com.chris.flatbuffer_example.data;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Bag extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_11_1(); }
  public static Bag getRootAsBag(ByteBuffer _bb) { return getRootAsBag(_bb, new Bag()); }
  public static Bag getRootAsBag(ByteBuffer _bb, Bag obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Bag __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public short capacity() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createBag(FlatBufferBuilder builder,
      int nameOffset,
      short capacity) {
    builder.startTable(2);
    Bag.addName(builder, nameOffset);
    Bag.addCapacity(builder, capacity);
    return Bag.endBag(builder);
  }

  public static void startBag(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addCapacity(FlatBufferBuilder builder, short capacity) { builder.addShort(1, capacity, 0); }
  public static int endBag(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Bag get(int j) { return get(new Bag(), j); }
    public Bag get(Bag obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

